"use client";

import React, { useState, useEffect } from 'react';
import { callZapierWebhook } from '../components/utils/zapier';
import { SCREEN_STATES } from '../configuration/screenStates';
import FormComponent from '../components/FormComponent';
import LoadingComponent from '../components/LoadingComponent';
import ScanningComponent from '../components/ScanningComponent';
import Valhallah from '../components/Valhallah.js';
import PollComponent from '../components/PollComponent';
import StaticMarketingComponent from '../components/StaticMarketingComponent';
import InfoDisplayComponent from '../components/InfoDisplayComponent';
import axios from 'axios';

const MainContainer = () => {
    const [loading, setLoading] = useState(false);
    const [callbackReceived, setCallbackReceived] = useState(true);
    const [zapierResponse, setZapierResponse] = useState(null);
    const [screenshotUrl, setScreenshotUrl] = useState(null);
    const [currentScreenIndex, setCurrentScreenIndex] = useState(0);
    const [responses, setResponses] = useState({});
    const [showPoll, setShowPoll] = useState(false);
    const [iframeUrl, setIframeUrl] = useState('');
    const [showIframe, setShowIframe] = useState(false);
    const [formVisible, setFormVisible] = useState(true);
    const [enteredWebsite, setEnteredWebsite] = useState('');
    const [messages, setMessages] = useState([]);
    const [currentMessageIndex, setCurrentMessageIndex] = useState(0);
    const gifPath = process.env.NEXT_PUBLIC_GIF_PATH;
    const [isLoading, setIsLoading] = useState(false);
    const [isScanning, setIsScanning] = useState(false);
    const [messageItems, setMessageItems] = useState(null);
    const [aiListingUrl, setaiListingUrl] = useState('EMPTY');
    const [screenState, setScreenState] = useState(SCREEN_STATES.FORM);
    
    // Define the sessionID in state
    const [sessionID, setSessionID] = useState('');

    // Define the delay function
    const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));    

    // On component mount, check if sessionID exists in localStorage
    useEffect(() => {
        let existingSessionID = localStorage.getItem('sessionID');
        if (existingSessionID) {
            setSessionID(existingSessionID);
        } else {
            const newSessionID = Math.random().toString(36).substring(2, 8);
            localStorage.setItem('sessionID', newSessionID);
            setSessionID(newSessionID);
        }
    }, []);

    // Update screen state based on various conditions
    useEffect(() => {
        if (isLoading) {
            setScreenState(SCREEN_STATES.LOADING);
        } else if (isScanning) {
            setScreenState(SCREEN_STATES.SCANNING);
        } else if (aiListingUrl !== 'EMPTY') {
            setScreenState(SCREEN_STATES.CHAT_TEASE);
        } else {
            setScreenState(SCREEN_STATES.FORM);
        }
    }, [isLoading, isScanning, aiListingUrl]);
    
    // Loop through messages.
    useEffect(() => {
        if (messages.length > 0) {
            const interval = setInterval(() => {
                setCurrentMessageIndex(prevIndex => (prevIndex + 1) % messages.length);
            }, 5000); // Change message every 5 seconds
    
            return () => clearInterval(interval);
        }
    }, [messages]);

    // Poll for Zapier response and process it
    useEffect(() => {
        let pollingInterval;
        if (loading) {
            setCallbackReceived(false);
            pollingInterval = setInterval(async () => {
                try {
                    const response = await fetch('/api/get-latest-response');
                    const data = await response.json();
                    if (data.response && data.response.status) {
                        setZapierResponse(data.response);
                        const processedItems = processZapierResponse(data.response.message);
                        setMessageItems(processedItems);
                        setLoading(false);
                        setCallbackReceived(true);
                        clearInterval(pollingInterval);
                        setShowPoll(false);
                    }
                } catch (error) {
                    console.error('Error polling latest response:', error);
                }
            }, 2000);
        }
    
        return () => clearInterval(pollingInterval);
    }, [loading]);
    
    // Set scanning state when screenshot URL is available
    useEffect(() => {
        if (screenshotUrl) {
            setIsLoading(false);
            setIsScanning(true);
        }
    }, [screenshotUrl]);

    const extractCompanyName = (message, website) => {
        if (message) {
            const match = message.match(/--(.+?)--/);
            if (match) {
                return match[1].trim();
            }
        }
        const cleanedWebsite = website.replace(/^https?:\/\//, '');
        return `magic-page-company-${cleanedWebsite.replace(/\./g, '-')}`;
    };

    const handleSubmit = async (email, website) => {
        if (!email || !website || !email.includes('@') || !website.startsWith('http')) {
            alert("Please enter a valid email and website URL.");
            return;
        }

        setZapierResponse(null);
        setScreenshotUrl(null);
        setEnteredWebsite(website);
        setFormVisible(false);
        setIsLoading(true);

        if (!callbackReceived) {
            alert("Please wait until the current request is processed.");
            return;
        }

        await fetch('/api/clear-response', { method: 'POST' });

        setLoading(true);
        setShowPoll(true);

        try {
            console.log('Calling Vendasta Automation API');
            let companyName = website;
            const vendastaAutomationResponse = await fetch('/api/vendasta-automation-proxy', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ email, website, company: companyName, sessionID }) // Include sessionID
            });

            console.log('Calling Screenshot');
            const screenshotResponse = await fetch(`/api/get-screenshot?url=${encodeURIComponent(website)}`);
            const screenshotData = await screenshotResponse.json();
            if (screenshotData.screenshotUrl) {
                setScreenshotUrl(screenshotData.screenshotUrl);
                console.log('Thumbnail successfully captured and generated.');
            } else {
                console.error('Error fetching screenshot:', screenshotData.error);
            }

            // Insert the visitor data into the database
            try {
                await axios.post('/api/dbInsertVisitor', {
                    sessionID: sessionID,
                    email: email,
                    website: website,
                    companyName: companyName,
                    myListingUrl: "EMPTY"
                });
                console.log('Visitor inserted successfully.', sessionID);
            } catch (error) {
                console.error('Error inserting visitor:', error);
            }

            console.log('Calling Zapier Webhook');
            const response = await callZapierWebhook(email, website);
            console.log('Zapier Response:', response); 
            setZapierResponse(response);

            companyName = response && response.message ? extractCompanyName(response.message, website) : `magic-page-company-${website.replace(/^https?:\/\//, '').replace(/\./g, '-')}`;
            console.log("Extracted Company Name: " + companyName);
            
            const pollForMyListingUrl = async () => {
                let myListingUrl = null;
                const startTime = Date.now();
            
                const poll = async () => {
                    const elapsedTime = Date.now() - startTime;
                    if (elapsedTime > 170000) { // Polling timeout after approximately 3 minutes
                        clearInterval(pollingInterval);
                        console.error('Polling timed out.');
                        return;
                    }
            
                    myListingUrl = await fetchMyListingUrl(sessionID);
            
                    if (myListingUrl && myListingUrl !== 'EMPTY') {
                        try {
                            await axios.post('https://crkid.com/api/dbUpdateVisitor', {
                                sessionID: sessionID,
                                myListingUrl: myListingUrl
                            });
                            console.log('Visitor updated successfully.', sessionID, myListingUrl);
                        } catch (error) {
                            console.error('Error updating visitor:', error);
                        }
                        clearInterval(pollingInterval);
                        setIframeUrl(myListingUrl);
                        setShowIframe(true);
                        setIsScanning(false);
                        setaiListingUrl(myListingUrl);
                        console.log('Fetched URL:', myListingUrl);
                    } else {
                        console.log('Waiting for URL to be updated...');
                    }
                };
            
                const pollingInterval = setInterval(poll, 5000); // Poll every 5 seconds
            };
            
            await pollForMyListingUrl();
        
        } catch (error) {
            console.error('Failed to call the API Stuff:', error);
            setZapierResponse({ status: 'error', message: `Failed to call the API stuff: ${error.message}` });
        }
    };

    return (
        <div className="full-screen-container">
            {screenState === SCREEN_STATES.LOADING ? (
                <LoadingComponent />
            ) : screenState === SCREEN_STATES.SCANNING ? (
                <ScanningComponent screenshotUrl={screenshotUrl} messageItems={messageItems} />
            ) : screenState === SCREEN_STATES.CHAT_TEASE ? (
                <Valhallah aiListingUrl={aiListingUrl} />
            ) : (
                <div className="centered-content">
                    <FormComponent onSubmit={handleSubmit} />
                </div>
            )}

            <style jsx>{`
                .full-screen-container {
                    display: block;
                    height: 100vh;
                    width: 100vw;
                    background: linear-gradient(135deg, #003366 0%, #1a1a73 100%);
                    color: white;
                    padding: 0;
                    margin: 0;
                    box-sizing: border-box;
                }
                .centered-content, .loading-screen {
                    text-align: center;
                    max-width: 100%;
                    padding: 0px;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                }
                .loading-screen h2 {
                    font-size: 2.5em;
                    margin-bottom: 20px;
                    color: #ffffff;
                }
                .loading-screen img {
                    margin-top: 20px;
                }
            `}</style>
        </div>
    );
};

export default MainContainer;
